#!/usr/bin/env node
const fs = require('fs')
const properties = require('../assets/js/properties')
const { uniq } = require('../lib/utils')
const index = {}

const indexPropertyByLabel = property => {
  const { label } = properties[property]

  indexWord(property, label)

  const normalizedLabel = label
    // Drop the generic part in external id properties labels
    // ex: 'VIAF ID' => 'VIAF'
    .replace(/\s*(ID|code|number|identifier)$/i, '')
    .replace(/\s(of|a|the|in|or|for|index)\s/, ' ')
    .toLowerCase()
    .trim()

  if (normalizedLabel.length === 0) return

  normalizedLabel
  .split(' ')
  .filter(part => /^[a-z].*[^)]{1}$/.test(part))
  .forEach(indexWord.bind(null, property))
}

const indexPropertyByAliases = property => {
  let aliases = properties[property].aliases.split('\n')
  aliases = uniq(aliases)
  aliases.forEach(indexWord.bind(null, property))
}

const formatIndexWord = str => {
  return str
  .toLowerCase()
  // Remove spaces, dashes, dots, etc
  .replace(/\W+/g, '')
}

const indexWord = (property, word) => {
  if (!word) return
  word = formatIndexWord(word)
  if (word.length === 0 || word.length > 20) return
  index[word] = index[word] || []
  if (!index[word].includes(property)) index[word].push(property)
}

for (const property in properties) {
  const { type, authority } = properties[property]
  if (type === 'ExternalId' || (type === 'String' && authority)) {
    indexPropertyByLabel(property)
    indexPropertyByAliases(property)
  }
}

Object.keys(index).forEach(word => {
  // Removing words that are not specific enough
  // such as: list, library, registry, international, thesaurus, etc
  // That would generate glutton SPARQL requests to look up all those properties
  if (index[word].length > 5) delete index[word]
})

const file = `// Generated by scripts/generate_properties_index
module.exports = ${JSON.stringify(index, null, 2)}`

fs.writeFileSync('./assets/js/properties_index.js', file)
